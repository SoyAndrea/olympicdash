{"title":"Olympic Games","markdown":{"yaml":{"title":"Olympic Games","format":{"dashboard":{"orientation":"columns","nav-buttons":["github"],"github":"https://github.com/posit-conf-2024/olympicdash"}},"logo":"../images/olympics-logo.svg"},"headingText":"Filter for Summer season and non-NA medals","containsRefs":false,"markdown":"\n\n```{python}\n#| label: load-packages\nfrom plotnine import *\nimport great_tables as gt\nimport pandas as pd\n```\n\n```{python}\n#| label: load-data\nolympics_full = pd.read_csv(\"../data/olympics.csv\", low_memory = False)\n```\n\n```{python}\n#| label: prep-data\nolympics = olympics_full[(olympics_full[\"season\"] == \"Summer\") & (olympics_full[\"medal\"].notna())]\n\n# Split the team column at \"-\" into two columns\nsplit_data = olympics[\"team\"].str.split(\"-\", n = 1, expand = True)\nolympics.loc[:, \"team\"] = split_data[0]\n\n# Reorder the medal column categories\nolympics.loc[:, \"medal\"] = pd.Categorical(olympics[\"medal\"], categories = [\"Bronze\", \"Silver\", \"Gold\"])\n```\n\n## Column\n\n### Row {height=60%}\n\n```{python}\n#| title: Medals by sport\n#| warning: false\n# Lump the sport column to top 15 categories, grouping others as Other\ntop_15_sports = olympics[\"sport\"].value_counts().nlargest(15).index\nolympics[\"sport\"] = olympics[\"sport\"].apply(lambda x: x if x in top_15_sports else \"Other\")\n\n# Convert the sport column to a categorical type with order based on frequency, and reverse the order\nolympics[\"sport\"] = pd.Categorical(olympics[\"sport\"], categories = olympics[\"sport\"].value_counts().index[::-1])\n\n# Move the Other category of the sport column to the beginning\nnew_order = [\"Other\"] + [cat for cat in olympics[\"sport\"].cat.categories if cat != \"Other\"]\nolympics[\"sport\"] = olympics[\"sport\"].cat.reorder_categories(new_order)\n\n# Plot\n(\n    ggplot(olympics, aes(x = \"sport\", fill = \"medal\"))\n    + geom_bar()\n    + coord_flip()\n    + guides(fill = guide_legend(reverse = True)) \n    + labs(x = \"\", y = \"\", fill = \"Medal\") \n    + theme_minimal() \n    + theme(\n        legend_position = \"inside\",\n        legend_position_inside = (0.9, 0.2),\n        legend_direction = \"horizontal\",\n        legend_background = element_rect(fill = \"white\", color = \"gray\"),\n        figure_size = (10, 5)\n    )\n)\n```\n\n### Row {height=40%}\n\n```{python}\n#| title: Medals by year\n# Count the occurrences of each medal per year\nolympics_count = olympics.groupby([\"year\", \"medal\"], observed=True).size().reset_index(name = \"n\")\n\n# Plot\n(\n    ggplot(olympics_count, aes(x = \"year\", y = \"n\", color = \"medal\")) \n    + geom_point(size = 0.5) \n    + geom_line() \n    + guides(color = guide_legend(reverse = True)) \n    + scale_x_continuous(breaks = range(1896, 2020, 8)) \n    + labs(x = \"Year\", y = \"\", color = \"Medal\") \n    + theme_minimal() \n    + theme(\n        legend_position = \"inside\",\n        legend_position_inside = (0.9, 0.2),\n        legend_direction = \"horizontal\",\n        legend_background = element_rect(fill = \"white\", color = \"gray\"),\n        figure_size = (10, 2.5)\n    )\n)\n```\n\n## Column\n\n```{python}\n#| title: Medals by country\n# Count the occurrences of each medal per team\nolympics_count = olympics.groupby([\"team\", \"medal\"]).size().reset_index(name=\"n\")\n\n# Pivot olympics_count to get medals as columns\nolympics_pivot = olympics_count.pivot_table(index = \"team\", columns = \"medal\", values = \"n\", fill_value = 0)\n\n# Calculate the total number of medals\nolympics_pivot[\"Total\"] = olympics_pivot[[\"Bronze\", \"Gold\", \"Silver\"]].sum(axis=1)\n\n# Reset the index and rearrange columns\nolympics_pivot = olympics_pivot.reset_index()\nolympics_pivot = olympics_pivot[[\"team\", \"Gold\", \"Silver\", \"Bronze\", \"Total\"]]\n\n# Sort by Total medals, then team\nolympics_pivot = olympics_pivot.sort_values(by=[\"Total\", \"team\"], ascending=[False, True])\n\n# Rename the team column to Team\nolympics_pivot.rename(columns={\"team\": \"Team\"}, inplace=True)\n\n(\n    gt.GT(olympics_pivot)\n)\n```\n","srcMarkdownNoYaml":"\n\n```{python}\n#| label: load-packages\nfrom plotnine import *\nimport great_tables as gt\nimport pandas as pd\n```\n\n```{python}\n#| label: load-data\nolympics_full = pd.read_csv(\"../data/olympics.csv\", low_memory = False)\n```\n\n```{python}\n#| label: prep-data\n# Filter for Summer season and non-NA medals\nolympics = olympics_full[(olympics_full[\"season\"] == \"Summer\") & (olympics_full[\"medal\"].notna())]\n\n# Split the team column at \"-\" into two columns\nsplit_data = olympics[\"team\"].str.split(\"-\", n = 1, expand = True)\nolympics.loc[:, \"team\"] = split_data[0]\n\n# Reorder the medal column categories\nolympics.loc[:, \"medal\"] = pd.Categorical(olympics[\"medal\"], categories = [\"Bronze\", \"Silver\", \"Gold\"])\n```\n\n## Column\n\n### Row {height=60%}\n\n```{python}\n#| title: Medals by sport\n#| warning: false\n# Lump the sport column to top 15 categories, grouping others as Other\ntop_15_sports = olympics[\"sport\"].value_counts().nlargest(15).index\nolympics[\"sport\"] = olympics[\"sport\"].apply(lambda x: x if x in top_15_sports else \"Other\")\n\n# Convert the sport column to a categorical type with order based on frequency, and reverse the order\nolympics[\"sport\"] = pd.Categorical(olympics[\"sport\"], categories = olympics[\"sport\"].value_counts().index[::-1])\n\n# Move the Other category of the sport column to the beginning\nnew_order = [\"Other\"] + [cat for cat in olympics[\"sport\"].cat.categories if cat != \"Other\"]\nolympics[\"sport\"] = olympics[\"sport\"].cat.reorder_categories(new_order)\n\n# Plot\n(\n    ggplot(olympics, aes(x = \"sport\", fill = \"medal\"))\n    + geom_bar()\n    + coord_flip()\n    + guides(fill = guide_legend(reverse = True)) \n    + labs(x = \"\", y = \"\", fill = \"Medal\") \n    + theme_minimal() \n    + theme(\n        legend_position = \"inside\",\n        legend_position_inside = (0.9, 0.2),\n        legend_direction = \"horizontal\",\n        legend_background = element_rect(fill = \"white\", color = \"gray\"),\n        figure_size = (10, 5)\n    )\n)\n```\n\n### Row {height=40%}\n\n```{python}\n#| title: Medals by year\n# Count the occurrences of each medal per year\nolympics_count = olympics.groupby([\"year\", \"medal\"], observed=True).size().reset_index(name = \"n\")\n\n# Plot\n(\n    ggplot(olympics_count, aes(x = \"year\", y = \"n\", color = \"medal\")) \n    + geom_point(size = 0.5) \n    + geom_line() \n    + guides(color = guide_legend(reverse = True)) \n    + scale_x_continuous(breaks = range(1896, 2020, 8)) \n    + labs(x = \"Year\", y = \"\", color = \"Medal\") \n    + theme_minimal() \n    + theme(\n        legend_position = \"inside\",\n        legend_position_inside = (0.9, 0.2),\n        legend_direction = \"horizontal\",\n        legend_background = element_rect(fill = \"white\", color = \"gray\"),\n        figure_size = (10, 2.5)\n    )\n)\n```\n\n## Column\n\n```{python}\n#| title: Medals by country\n# Count the occurrences of each medal per team\nolympics_count = olympics.groupby([\"team\", \"medal\"]).size().reset_index(name=\"n\")\n\n# Pivot olympics_count to get medals as columns\nolympics_pivot = olympics_count.pivot_table(index = \"team\", columns = \"medal\", values = \"n\", fill_value = 0)\n\n# Calculate the total number of medals\nolympics_pivot[\"Total\"] = olympics_pivot[[\"Bronze\", \"Gold\", \"Silver\"]].sum(axis=1)\n\n# Reset the index and rearrange columns\nolympics_pivot = olympics_pivot.reset_index()\nolympics_pivot = olympics_pivot[[\"team\", \"Gold\", \"Silver\", \"Bronze\", \"Total\"]]\n\n# Sort by Total medals, then team\nolympics_pivot = olympics_pivot.sort_values(by=[\"Total\", \"team\"], ascending=[False, True])\n\n# Rename the team column to Team\nolympics_pivot.rename(columns={\"team\": \"Team\"}, inplace=True)\n\n(\n    gt.GT(olympics_pivot)\n)\n```\n"},"formats":{"dashboard":{"identifier":{"display-name":"HTML","target-format":"dashboard","base-format":"dashboard"},"execute":{"fig-width":8,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":"all","plotly-connected":false,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"olympicdash-py-1-answers.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.56","page-layout":"custom","title":"Olympic Games","logo":"../images/olympics-logo.svg","orientation":"columns","nav-buttons":["github"],"github":"https://github.com/posit-conf-2024/olympicdash"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":[]}